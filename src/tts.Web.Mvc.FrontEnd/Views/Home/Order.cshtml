@using tts.Web.Startup
@model tts.Products.Dto.ProductDto

@{
    ViewBag.Title = "Thanh toán";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thanh toán</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    @* Add anti-forgery token *@
    @Html.AntiForgeryToken()
    
    @* Store model data in hidden fields *@
    <input type="hidden" id="productId" value="@Model?.Id" />
    <input type="hidden" id="productName" value="@Model?.Name" />
    <input type="hidden" id="productPrice" value="@Model?.Price" />

    <style>
        :root {
            --primary-color: #dc3545;
            --secondary-color: #6c757d;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: var(--dark-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
        }

        h2, h4 {
            color: var(--dark-color);
            font-weight: 600;
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            margin-bottom: 20px;
        }

        .card:hover {
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            font-weight: 600;
            padding: 1rem 1.25rem;
            border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
        }

        .card-body {
            padding: 1.5rem;
        }

        .form-control {
            border-radius: var(--border-radius);
            padding: 0.75rem 1rem;
            border: 1px solid #ced4da;
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
        }

        label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: var(--secondary-color);
        }

        .btn-danger {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 0.75rem;
            font-weight: 500;
            border-radius: var(--border-radius);
            transition: var(--transition);
        }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
            transform: translateY(-2px);
        }

        .btn-danger:active {
            transform: translateY(0);
        }

        hr {
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            margin: 1rem 0;
        }

        .text-danger {
            color: var(--primary-color) !important;
            font-size: 1.1rem;
        }

        .form-group {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-group label {
            position: absolute;
            top: 0.75rem;
            left: 1rem;
            color: var(--secondary-color);
            transition: var(--transition);
            pointer-events: none;
            background-color: white;
            padding: 0 0.25rem;
            z-index: 1;
        }

        .form-group input:focus + label,
        .form-group input:not(:placeholder-shown) + label,
        .form-group textarea:focus + label,
        .form-group textarea:not(:placeholder-shown) + label {
            top: -0.5rem;
            left: 0.75rem;
            font-size: 0.75rem;
            color: var(--primary-color);
            background-color: white;
            z-index: 2;
        }

        .form-group textarea {
            min-height: 80px;
            resize: vertical;
        }

        .order-summary {
            background-color: var(--light-color);
            padding: 1rem;
            border-radius: var(--border-radius);
        }

        .order-item {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .order-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: var(--border-radius);
            margin-right: 1rem;
        }

        .order-item-details {
            flex: 1;
        }

        .order-item-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .order-item-price {
            color: var(--primary-color);
            font-weight: 600;
        }

        .order-item-quantity {
            color: var(--secondary-color);
        }

        .default-image {
            background-color: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--secondary-color);
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <h2 class="mb-4"><i class="fas fa-shopping-cart me-2"></i>Thanh toán</h2>
        
        <div class="row">
            <!-- Customer Information -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h4><i class="fas fa-user me-2"></i>Thông tin khách hàng</h4>
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="form-group">
                                <input type="text" class="form-control" id="name" placeholder=" " required>
                                <label for="name">Họ và tên</label>
                            </div>
                            
                            <div class="form-group">
                                <input type="tel" class="form-control" id="phone" placeholder=" " required>
                                <label for="phone">Số điện thoại</label>
                            </div>
                            
                            <div class="form-group">
                                <input type="email" class="form-control" id="email" placeholder=" ">
                                <label for="email">Email (không bắt buộc)</label>
                            </div>
                            
                            <div class="form-group">
                                <textarea class="form-control" id="address" rows="3" placeholder=" " required></textarea>
                                <label for="address">Địa chỉ giao hàng</label>
                            </div>
                            
                            <div class="form-group">
                                <textarea class="form-control" id="note" rows="2" placeholder=" "></textarea>
                                <label for="note">Ghi chú</label>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- Order Summary -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h4><i class="fas fa-shopping-bag me-2"></i>Đơn hàng của bạn</h4>
                    </div>
                    <div class="card-body">
                        <div class="order-item">
                            @if (!string.IsNullOrEmpty(Model?.ImageUrl))
                            {
                                <img src="@Model.ImageUrl" alt="@Model?.Name">
                            }
                            else
                            {
                                <div class="default-image" style="width: 80px; height: 80px;">
                                    <i class="fas fa-image"></i>
                                </div>
                            }
                            <div class="order-item-details">
                                <div class="order-item-title">@(Model?.Name ?? "Sản phẩm")</div>
                                <div class="order-item-price">@(Model?.Price.ToString("N0") ?? "0")₫</div>
                                <div class="order-item-quantity">Số lượng: 1</div>
                            </div>
                        </div>
                        
                        <div class="order-summary">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Tạm tính:</span>
                                <span>@(Model?.Price.ToString("N0") ?? "0")₫</span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Phí vận chuyển:</span>
                                <span>30,000₫</span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between">
                                <strong>Tổng cộng:</strong>
                                <strong class="text-danger">@((Model?.Price + 30000 ?? 30000).ToString("N0"))₫</strong>
                            </div>
                        </div>
                        
                        <button class="btn btn-danger btn-block mt-3 w-100">
                            <i class="fas fa-paper-plane me-2"></i>Đặt hàng
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get product data from hidden fields
            const productData = {
                id: document.getElementById('productId').value,
                name: document.getElementById('productName').value,
                price: document.getElementById('productPrice').value
            };

            console.log('Product data:', productData);

            // Form validation and submission
            const orderButton = document.querySelector('.btn-danger');
            if (orderButton) {
                orderButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    console.log('Order button clicked');

                    const form = document.querySelector('form');
                    if (!form) {
                        console.error('Form not found');
                        return;
                    }

                    const inputs = form.querySelectorAll('[required]');
                    let isValid = true;

                    inputs.forEach(input => {
                        if (!input.value.trim()) {
                            input.classList.add('is-invalid');
                            isValid = false;
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    });

                    if (!isValid) {
                        alert('Vui lòng điền đầy đủ thông tin bắt buộc');
                        return;
                    }

                    try {
                        this.disabled = true;
                        this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Đang xử lý...';

                        const orderData = {
                            customerName: document.getElementById('name').value.trim(),
                            phoneNumber: document.getElementById('phone').value.trim(),
                            email: document.getElementById('email').value.trim() || null,
                            address: document.getElementById('address').value.trim(),
                            note: document.getElementById('note').value.trim() || null,
                            items: [{
                                productId: parseInt(productData.id) || 0,
                                productName: productData.name || '',
                                quantity: 1,
                                price: parseFloat(productData.price) || 0
                            }]
                        };

                        console.log('Sending order data:', orderData);

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        console.log('CSRF Token:', token);

                        const response = await fetch('@Url.Action("CreateOrder", "Home")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(orderData)
                        });

                        console.log('Response status:', response.status);
                        const responseText = await response.text();
                        console.log('Response text:', responseText);

                        let result;
                        try {
                            result = JSON.parse(responseText);
                        } catch (e) {
                            console.error('Failed to parse response as JSON:', e);
                            throw new Error('Phản hồi không hợp lệ từ máy chủ');
                        }

                        if (result.success) {
                            alert('Đơn hàng của bạn đã được đặt thành công!');
                            window.location.href = '@Url.Action("Index", "Home")';
                        } else {
                            throw new Error(result.message || 'Có lỗi xảy ra khi đặt hàng');
                        }
                    } catch (error) {
                        console.error('Error during order submission:', error);
                        alert('Có lỗi xảy ra: ' + error.message);
                    } finally {
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Đặt hàng';
                    }
                });
            }

            // Phone number formatting
            const phoneInput = document.getElementById('phone');
            if (phoneInput) {
                phoneInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/\D/g, '');
                    if (value.length > 0) {
                        value = value.match(/(\d{0,4})(\d{0,3})(\d{0,3})/);
                        value = value[1] + (value[2] ? '.' + value[2] : '') + (value[3] ? '.' + value[3] : '');
                    }
                    e.target.value = value;
                });
            }
        });
    </script>
</body>
</html>